BEGIN
FUNCTION read_incident_creation(file_upload_log_entry, task_id, file_upload_seq, file_type, file_path):
    INIT file_upload_log_collection, system_tasks_collection, system_tasks_inprogress_collection

    CALL update_status_to_inprogress(task_id, file_upload_seq)

    // Get Created_By from the system task
    system_task_entry ← system_tasks_collection.find_one({ "Task_Id": task_id })
    IF system_task_entry is missing OR "Created_By" not in system_task_entry:
        RAISE TaskProcessingError(task_id, "'created_by' field missing in system_task")

    created_by ← system_task_entry["Created_By"]

    // Generate a unique destination file name
    LOOP:
        new_file_name ← file_type + timestamp + ".csv"
        new_file_path ← incident_creation_path + new_file_name
        IF new_file_path does not exist:
            BREAK
        WAIT for 1 second

    ENSURE incident_creation_path directory exists

    original_file_name ← file_upload_log_entry["File_Name"]
    source_file_path ← file_path + original_file_name

    IF source_file_path does not exist:
        RAISE TaskProcessingError(task_id, "File not found: " + source_file_path)

    TRY:
        MOVE source_file_path TO new_file_path

        UPDATE file_upload_log_collection:
            SET Forwarded_File_Path = new_file_path

        total_record_count ← 0
        success_count ← 0
        error_count ← 0

        PREPARE error_file_name ← file_type + timestamp + ".err.csv"
        error_file_path ← incident_creation_path + error_file_name
        OPEN new_file_path AS record_file
        OPEN error_file_path AS err_file (write mode)

        FOR EACH row IN record_file:
            TRY:
                total_record_count += 1

                IF row has less than 4 columns:
                    RAISE ValidationError(row_number, "Row", "Expected 4 columns")

                account_num, drc_action, source_type, monitor_months ← first 4 columns (stripped)

                IF account_num NOT 10-digit number:
                    RAISE ValidationError(row_number, "Account_Num", "Must be 10 digits")

                IF drc_action NOT in allowed list:
                    RAISE ValidationError(row_number, "DRC_Action", "Invalid action")

                IF source_type NOT in allowed list:
                    RAISE ValidationError(row_number, "Source_Type", "Invalid source")

                monitor_months ← 3 IF monitor_months is 0 or invalid ELSE convert to int
                IF monitor_months > 3:
                    RAISE ValidationError(row_number, "Monitor_Months", "Too large")

                IF drc_action == "collect CPE":
                    contact_number ← system_task_entry["Contact_Number"]
                    IF contact_number is missing:
                        error_count += 1
                        RAISE ValidationError(row_number, "collect CPE", "Missing number")

                payload ← {
                    "Account_Num": account_num,
                    "DRC_Action": drc_action,
                    "Monitor_Months": monitor_months,
                    "Created_By": created_by,
                    "Source_Type": source_type
                }

                IF drc_action == "collect CPE":
                    ADD "Contact_number": contact_number TO payload

                response ← POST to incident_creation_endpoint with payload
                CHECK response status (raise error if not 2xx)

                success_count += 1

            EXCEPT ValidationError AS e:
                error_count += 1
                WRITE row + error message TO err_file

            EXCEPT requests-related errors:
                CONTINUE // Error handling for connection/timeout/failure

        CLOSE err_file

        // Prepare status description
        IF error_count == 0:
            status_description ← "Incident creation completed successfully."
        ELSE:
            status_description ← "Incident creation completed with some validation errors. API called for valid records."

        // Final status update in file log and system task collections
        UPDATE file_upload_log_collection:
            SET total_record_count, success_count, error_count,
                log_status = "Completed",
                log_status_description = status_description,
                error_file_path

        UPDATE system_tasks_collection:
            SET task_status = "Completed",
                task_status_description = status_description,
                total_record_count,
                success_count

        UPDATE system_tasks_inprogress_collection:
            SET task_status = "Completed",
                task_status_description = status_description,
                total_record_count,
                success_count

    EXCEPT Exception AS e:
        RAISE TaskProcessingError(task_id, "Unexpected error occurred")
END